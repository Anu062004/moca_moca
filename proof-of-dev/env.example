# Proof of Dev Wave 3 - Environment Configuration

## Required Environment Variables

Create a `.env.local` file in the `proof-of-dev` directory with the following variables:

### Core Application
```env
# NextAuth Configuration
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_nextauth_secret_here

# GitHub OAuth (Required for GitHub integration)
GITHUB_CLIENT_ID=your_github_client_id_here
GITHUB_CLIENT_SECRET=your_github_client_secret_here
```

### AIR Kit Configuration (Required for credential issuance)
```env
# AIR Kit Partner Configuration
AIRKIT_PARTNER_ID=moca-proof-of-dev-2024
AIRKIT_API_KEY=dev-key

# AIR Kit API Endpoint
AIRKIT_BASE_URL=https://air.api.air3.com/v2
```

### Moca Network Configuration (Required for blockchain operations)
```env
# Moca Network RPC
MOCA_RPC_URL=https://testnet-rpc.mocachain.org
MOCA_CHAIN_ID=222888
MOCA_EXPLORER_URL=https://testnet-explorer.mocachain.org

# Smart Contract (Deploy first, then update this address)
PROOF_OF_DEV_CONTRACT_ADDRESS=0x0000000000000000000000000000000000000000

# Deployer Wallet (Required for minting)
DEPLOYER_PRIVATE_KEY=your_deployer_private_key_here
```

### WalletConnect Configuration (Optional)
```env
# WalletConnect Project ID
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=your_walletconnect_project_id_here
```

### GitHub Integration (Required for auto-verification)
```env
# GitHub Personal Access Token for server-side operations
GITHUB_TOKEN=your_github_personal_access_token_here
```

### Development Configuration
```env
# Development settings
NODE_ENV=development
DEBUG=true
```

## Setup Instructions

### 1. Generate NextAuth Secret
```bash
openssl rand -base64 32
```

### 2. Create GitHub OAuth App
1. Go to https://github.com/settings/developers
2. Click "OAuth Apps" in the left sidebar
3. Click "New OAuth App"
4. Fill in:
   - Application name: "Proof of Dev Wave 3"
   - Homepage URL: http://localhost:3000
   - Authorization callback URL: http://localhost:3000/api/auth/callback/github
5. Click "Register application"
6. Copy the **Client ID**
7. Click "Generate a new client secret"
8. Copy the **Client Secret**
9. Add both to your `.env.local` file

### 3. Deploy Smart Contract
```bash
# Compile contract
npm run hh:compile

# Deploy to Moca Testnet
npm run hh:deploy:moca

# Copy the deployed contract address to PROOF_OF_DEV_CONTRACT_ADDRESS
```

### 4. Create Deployer Wallet
```bash
# Generate a new wallet (for testing only)
npx hardhat generate-wallet

# Or use an existing wallet's private key
# NEVER use a mainnet wallet for testing!
```

### 5. Get WalletConnect Project ID
1. Go to https://cloud.walletconnect.com/
2. Create a new project
3. Copy the Project ID

## Validation

Use the diagnostics endpoint to check your configuration:
```bash
curl http://localhost:3000/api/diagnostics
```

## Troubleshooting

### Common Issues:
1. **"Server configuration missing"** → Missing environment variables
2. **"Contract not found"** → Contract not deployed or wrong address
3. **"Unauthorized"** → GitHub OAuth not configured
4. **"Invalid private key"** → DEPLOYER_PRIVATE_KEY format incorrect

### Quick Test:
```bash
# Test environment setup
curl -X POST http://localhost:3000/api/diagnostics

# Test minting (after setup)
curl -X POST http://localhost:3000/api/mint \
  -H "Content-Type: application/json" \
  -d '{"developer":"0x1234...","githubUsername":"test","metrics":{"reputationScore":100,"totalCommits":50,"totalRepositories":10,"totalStars":100,"followers":20,"accountAge":365,"topLanguages":["JavaScript","TypeScript"]}}'
```
